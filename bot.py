from aiogram import Bot, Dispatcher, executor, types

from mail.mail import send_mail

from extensions import quiz_buttons, quiz_menu_continue, quiz_menu, bot_menu, quiz_stop, review_cancel, final_message, choose
from database.db_conn import Category, Sessions, Scores, Questions, Animals, Statistics, Reviews
from sqlalchemy import create_engine
from aiogram.dispatcher.filters import Text

import os
from dotenv import load_dotenv

load_dotenv('creds.env')

bot = Bot(token=os.environ.get("API_TOKEN"))

dp = Dispatcher(bot=bot)

engine = create_engine("sqlite:///database\\database.db")

questions = Questions.get_questions(engine)
descriptions, scores, links = Animals.get_animals(engine)
categories = Category.get_categories(engine)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    photo = open('images/welcome-img1.png', mode='+rb')
    await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
    await bot.send_photo(photo=photo, chat_id=message.chat.id, caption='–ß—Ç–æ–±—ã –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤–µ—Å–µ–ª—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å –¥–µ—Ç—Å—Ç–≤–æ –∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –≤–µ—Å–µ–ª—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É !\n'
            '–û—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ !\n'
            '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –ò–≥—Ä–∞—Ç—å ! üëá\n\n'
            
            '–ï—Å–ª–∏ –≤—ã —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å –ø–æ –º–∏–ª—ã–º, –∑–∞–±–∞–≤–Ω—ã–º, –Ω–µ–º–Ω–æ–≥–æ –æ–ø–∞—Å–Ω—ã–º, –Ω–æ –±–µ–∑—É–º–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º,'
            '—Ç–æ –í–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫!\n –î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã.\n\n'
            
            '–ê –µ—â–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º –∏ –ø–æ–¥–µ–ª–∏—Ç—Å—è —á–∞—Å—Ç–∏—á–∫–æ–π —Å–≤–æ–µ–π –¥–æ–±—Ä–æ—Ç—ã,'
            '—Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –ö—Ä—É–≥—É –î—Ä—É–∑–µ–π –∏ –¥–∞–∂–µ –≤–∑—è—Ç—å —Å–≤–æ–π —Ç–æ—Ç–µ–º –∏–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É.\n'
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞–∂–º–∏—Ç–µ –£–∑–Ω–∞—Ç—å –æ –ö—Ä—É–≥–µ –¥—Ä—É–∑–µ–π.\n\n'
            
            '–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É –Ω–∞–∂–º–∏—Ç–µ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.', 
            reply_markup=bot_menu
             )
                         

@dp.message_handler(Text("–ò–≥—Ä–∞—Ç—å"))
async def begin_quiz(message: types.Message):
    user_id = message.from_user.id

    if Sessions.check_session(engine, user_id):
        sess = Sessions.get_session(engine, user_id)
        sess.at_welcome = True
        Sessions.save(engine, sess)
        await message.answer('–í—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.', reply_markup=quiz_menu_continue)
    else:
        await bot.send_message(text='–ü–æ–º–Ω–∏—Ç–µ –≤ –¥–µ—Ç—Å—Ç–≤–µ –±—ã–ª–∏ –∞–Ω–∫–µ—Ç—ã –∏ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É?\n'
                                    '–•–æ—Ç–∏—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ?\n –¢–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç—É,'
                                    ' –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –±–ª–∏–∂–µ –∏ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.\n'
                                    '–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã–π –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç'
                                    ' —Å–≤—è–∂–µ—Ç—Å—è —Å –¥—É—Ö–∞–º–∏ –ø—Ä–µ–¥–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!',
                               chat_id=message.chat.id, reply_markup=quiz_menu)


@dp.message_handler(Text("–ù–∞—á–∞–ª–∏"))
async def quiz(message: types.Message):
    user_id = message.from_user.id
    Sessions.add_session(engine, user_id)
    Scores.add_scores(engine, user_id)

    await bot.send_message(reply_markup=quiz_stop, text='–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', chat_id=message.chat.id)
    photo = open('images/questions/q1.jpg', mode='+rb')
    await message.answer_photo(caption=questions[0][0], photo=photo, reply_markup=quiz_buttons(0))


@dp.message_handler(Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
async def continue_quiz(message: types.Message):
    user_id = message.from_user.id
    if Sessions.check_session(engine, user_id):
        sess = Sessions.get_session(engine, user_id)
        if sess.at_welcome:
            sess.at_welcome = 0
            await bot.send_message(reply_markup=quiz_stop, text='–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                   chat_id=message.chat.id)
            path = f'images/questions/q{sess.cur_qst_num + 1}.jpg'
            photo = open(path, mode='+rb')

            await message.answer_photo(caption=questions[sess.cur_qst_num][0], photo=photo,
                                       reply_markup=quiz_buttons(sess.cur_qst_num))

            Sessions.save(engine, sess)


@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞"))
async def cancel_quiz(message: types.Message):
    user_id = message.from_user.id
    if Sessions.check_session(engine, user_id):
        s = Sessions.get_session(engine, user_id)
        if s.is_comment:
            await message.answer("–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=bot_menu)
            Sessions.del_session(engine, user_id)
        else:
            await message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–π—Ç–∏ –í–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑", reply_markup=bot_menu)


@dp.message_handler(Text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"))
async def stop_quiz(message: types.Message):
    await message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –í–∏–∫—Ç–æ—Ä–∏–Ω—É", reply_markup=bot_menu)


@dp.message_handler(Text("–°–±—Ä–æ—Å–∏—Ç—å"))
async def drop_quiz(message: types.Message):
    user_id = message.from_user.id
    Sessions.del_session(engine, user_id)
    Scores.del_scores(engine, user_id)
    await message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –í–∏–∫—Ç–æ—Ä–∏–Ω—É", reply_markup=bot_menu)


@dp.message_handler(Text("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã"))
async def buy_tickets(message: types.Message):
    await message.answer("https://www.mos.ru/afisha/event/414257/", reply_markup=bot_menu)


@dp.message_handler(Text("–£–∑–Ω–∞—Ç—å –æ –∫—Ä—É–≥–µ –¥—Ä—É–∑–µ–π"))
async def circle_of_friends(message: types.Message):
    await message.answer("https://www.justbenice.ru/work/moscowzoo/", reply_markup=bot_menu)


@dp.message_handler(Text("–°–≤—è–∑–∞—Ç—å—Å—è —Å  –Ω–∞–º–∏"))
async def contacts(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥—Ä—É–≥–æ–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Å–≤–æ–µ –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ "
                         "–æ–ø–µ–∫—É, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏ –º—ã –ø–æ–¥—Å–∫–∞–∂–µ–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "+7(958)813-15-60 \n"
                         "a.sharapova@moscowzoo.ru", reply_markup=bot_menu)


@dp.message_handler(Text("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
async def review_quiz(message: types.Message):
    user_id = message.from_user.id
    await message.answer('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–∑—ã–≤–∞. '
                         '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞".', reply_markup=review_cancel)
    s = Sessions(user_id=user_id, is_comment=True)
    Sessions.save(engine, s)


@dp.message_handler()
async def review_quiz(message: types.Message):
    user_id = message.from_user.id
    if Sessions.check_session(engine, user_id):
        s = Sessions.get_session(engine, user_id)
        if s.is_comment:
            c = Reviews(review=message.text)
            Reviews.save(engine, c)
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤.', reply_markup=bot_menu)
            Sessions.del_session(engine, user_id)


@dp.callback_query_handler()
async def quiz_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if "system" in callback_query.data:
        if "mail" in callback_query.data:
            send_mail(os.environ.get("TO_MAIL"), os.environ.get("FROM_MAIL"), os.environ.get("MAIL_PASSWORD"), callback_query.from_user.username, callback_query.data.split("system.mail.")[1])
    elif Sessions.check_session(engine, user_id):
        sess = Sessions.get_session(engine, user_id)
        qst = questions[sess.cur_qst_num][1][callback_query.data]
        Scores.update_scores(engine, user_id, qst["category"], qst["value"])

        sess.cur_qst_num += 1

        if sess.cur_qst_num < len(questions):
            path = f'images/questions/q{sess.cur_qst_num + 1}.jpg'
            photo = open(path, mode='+rb')
            await bot.edit_message_media(
                media=types.InputMedia(type='photo', media=photo, caption=questions[sess.cur_qst_num][0]),
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=quiz_buttons(sess.cur_qst_num))
            Sessions.save(engine, sess)
        else:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)

            our_scores = Scores.get_scores(engine, user_id)
            totem = choose(scores, categories, our_scores)
            msg = final_message(our_scores)
            keyboard = types.InlineKeyboardMarkup()
            button_link = types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –±–æ–ª—å—à–µ", url=links[totem])
            button_mail = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –æ–ø–µ–∫–µ.", callback_data="system.mail."+totem)
            keyboard.add(button_link)
            keyboard.add(button_mail)
            path = f'images/animals/{totem}.jpg'
            photo = open(path, mode='+rb')
            await bot.send_message(chat_id=callback_query.message.chat.id, text=msg)
            await bot.send_photo(chat_id=callback_query.message.chat.id, photo=photo)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=descriptions[totem],
                                   reply_markup=keyboard)
            await bot.send_message(chat_id=callback_query.message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –í—ã —É–∑–Ω–∞–ª–∏ —Å–≤–æ–π —Ç–æ—Ç–µ–º!!!\n"
                                                                                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤–∑—è—Ç—å —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É.\n"
                                                                                "–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ - —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑!\n"
                                                                                "–ê –µ—â–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –≤ –∑–æ–æ–ø–∞—Ä–∫ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è!"
                                   , reply_markup=bot_menu)
            Sessions.del_session(engine, user_id)
            Scores.del_scores(engine, user_id)
            Statistics.update_score(engine, totem)


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True)
